## train c3vd_v2
## trainer
log_dir: results
run_train: true
num_epochs: 25
batch_size: 12
save_checkpoint_freq: 1
log_freq: 100
run_val: true
run_test: true
metric_str_exclude: ["loss/photometric_1", "loss/photometric_2", "loss/photometric_3", "de/abs_rel", "de/sq_rel", "de/rms", "da/a2", "da/a3"]

## checkpoints
weights_init: pretrained # choices=["pretrained", "scratch"]

## resume
# models_to_load: ["net_depth_encoder", "net_depth_decoder", "net_pose_encoder", "net_pose_decoder"]
# start_epoch: 0
# load_weights_folder: /home/data/workspace/heqi/matchingloss/results/RC_baseline_depthnet_c3vd_v2_monodepth2/models/weights_20

## optimizer
lr: [0.0001, 0.00001, 26, 0.0001, 0.00001, 26]

## loss
disable_matcher: true
disparity_smoothness: 0.001
ratio_consistency: true

## dataloader
data_path: /home/data/workspace/heqi/monogastroendo/rect_c3vd_data_v2
split: c3vd_v2 # choices=["eigen_zhou", "eigen_full", "odom", "benchmark", "yifanwang", "yifanwang_cutoff1", "my_kitti", "simcol", "c3vd"]
dataset: C3VDDataset # choices=["kitti", "kitticorres", "kitti_odom", "kitti_depth", "kitti_test", "yifanwang", "my_kitti", "simcol", "simcolcorres", "c3vd", "c3vdcorres"]
png: true
height: 256
width: 320
matcher_result_train: data/c3vd_v2/matcher_results/train.npy
matcher_result_val: data/c3vd_v2/matcher_results/val.npy
matcher_result_test: data/c3vd_v2/matcher_results/test.npy
load_depth: true

## model
model_name: RC_baseline_depthnet_c3vd_v2_monodepth2
model: EstimateDepth
model_str: monodepth2 # choices=["lite-mono", "lite-mono-small", "lite-mono-tiny", "lite-mono-8m", "monodepth2"]
weight_decay: 0.01
drop_path: 0.2
num_layers: 18 # choices=[18, 34, 50, 101, 152]
disparity_smoothness: 0.001
scales: [0,1,2,3]
min_depth: 0.1
max_depth: 100.0
frame_ids: [0,-1,1]
min_gt_depth: 0.001
max_gt_depth: 1.0
